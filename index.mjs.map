{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/array.js","../lib/main.js","../lib/assign.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport vind2bind from '@stdlib/ndarray-base-vind2bind';\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Applies a function to elements in two input arrays while iterating from right to left and assigns the results to an output array.\n*\n* @private\n* @param {Object} x - object containing meta data for the first input ndarray\n* @param {string} x.ref - reference to original input ndarray-like object\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeInteger} x.length - number of elements\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} x.getter - callback for accessing `x` data buffer elements\n* @param {Object} y - object containing meta data for the second input ndarray\n* @param {string} y.ref - reference to original input ndarray-like object\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeInteger} y.length - number of elements\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} y.getter - callback for accessing `y` data buffer elements\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeInteger} z.length - number of elements\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} z.setter - callback for setting `z` data buffer elements\n* @param {Function} fcn - function to apply\n* @param {*} thisArg - function execution context\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n* import naryFunction from '@stdlib/utils-nary-function';\n* import add from '@stdlib/math-base-ops-caddf';\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 2, 1 ];\n* var sz = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'ref': null,\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'length': 4,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'getter': getter\n* };\n* x.ref = x;\n*\n* var y = {\n*     'ref': null,\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'length': 4,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'getter': getter\n* };\n* y.ref = y;\n*\n* var z = {\n*     'ref': null,\n*     'dtype': 'complex64',\n*     'data': zbuf,\n*     'length': 4,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'setter': setter\n* };\n*\n* // Apply the function:\n* map2Right( x, y, z, naryFunction( add, 2 ) );\n*\n* var v = z.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 2.0\n*\n* var im = imagf( v );\n* // returns 3.0\n*/\nfunction map2Right( x, y, z, fcn, thisArg ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar ordx;\n\tvar ordy;\n\tvar ordz;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar xref;\n\tvar yref;\n\tvar shx;\n\tvar shy;\n\tvar shz;\n\tvar len;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i;\n\n\t// Cache the total number of elements over which to iterate:\n\tlen = x.length;\n\n\t// Cache the array shapes:\n\tshx = x.shape;\n\tshy = y.shape;\n\tshz = z.shape;\n\n\t// Cache references to the input and output ndarray data buffers:\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache references to the respective stride arrays:\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays:\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache the respective array orders:\n\tordx = x.order;\n\tordy = y.order;\n\tordz = z.order;\n\n\t// Cache accessors:\n\txget = x.getter;\n\tyget = y.getter;\n\tzset = z.setter;\n\n\t// Cache references to the original input arrays:\n\txref = x.ref;\n\tyref = y.ref;\n\n\t// Check for a zero-dimensional array...\n\tif ( shx.length === 0 && shy.length === 0 ) {\n\t\tzset( zbuf, oz, fcn.call( thisArg, xget( xbuf, ox ), yget( ybuf, oy ), 0, xref, yref ) ); // eslint-disable-line max-len\n\t\treturn;\n\t}\n\t// Iterate over the arrays based on the linear **view** index, regardless as to how the data is stored in memory (note: this has negative performance implications for non-contiguous ndarrays due to a lack of data locality)...\n\tfor ( i = len-1; i >= 0; i-- ) {\n\t\tix = vind2bind( shx, sx, ox, ordx, i, MODE );\n\t\tiy = vind2bind( shy, sy, oy, ordy, i, MODE );\n\t\tiz = vind2bind( shz, sz, oz, ordz, i, MODE );\n\t\tzset( zbuf, iz, fcn.call( thisArg, xget( xbuf, ix ), yget( ybuf, iy ), i, xref, yref ) ); // eslint-disable-line max-len\n\t}\n}\n\n\n// EXPORTS //\n\nexport default map2Right;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a function to elements in two input arrays while iterating from right to left and assigns the results to an output array.\n*\n* @private\n* @param {Object} x - object containing data for the first input array\n* @param {ArrayLikeObject} x.data - array data\n* @param {Function} x.getter - callback for accessing array data elements\n* @param {Object} y - object containing data for the second input array\n* @param {ArrayLikeObject} y.data - array data\n* @param {Function} y.getter - callback for accessing array data elements\n* @param {Object} z - object containing output array data\n* @param {ArrayLikeObject} z.data - array data\n* @param {Function} z.setter - callback for setting array data elements\n* @param {Function} fcn - function to apply\n* @param {*} thisArg - function execution context\n* @returns {void}\n*\n* @example\n* import naryFunction from '@stdlib/utils-nary-function';\n* import add from '@stdlib/math-base-ops-add';\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf[ idx ];\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf[ idx ] = value;\n* }\n*\n* // Create the input and output array objects:\n* var x = {\n*     'data': [ 1, 2, 3, 4, 5, 6 ],\n*     'getter': getter\n* };\n* var y = {\n*     'data': [ 1, 1, 1, 1, 1, 1 ],\n*     'getter': getter\n* };\n* var z = {\n*     'data': [ 0, 0, 0, 0, 0, 0 ],\n*     'setter': setter\n* };\n*\n* map2Right( x, y, z, naryFunction( add, 2 ) );\n*\n* var data = z.data;\n* // returns [ 2, 3, 4, 5, 6, 7 ]\n*/\nfunction map2Right( x, y, z, fcn, thisArg ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar i;\n\n\t// Cache references to the input and output data:\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache accessors:\n\txget = x.getter;\n\tyget = y.getter;\n\tzset = z.setter;\n\n\t// Iterate over the elements...\n\tfor ( i = xbuf.length-1; i >= 0; i-- ) {\n\t\tzset( zbuf, i, fcn.call( thisArg, xget( xbuf, i ), yget( ybuf, i ), i, xbuf, ybuf ) ); // eslint-disable-line max-len\n\t}\n}\n\n\n// EXPORTS //\n\nexport default map2Right;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isArrayLikeObject from '@stdlib/assert-is-array-like-object';\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport isFunction from '@stdlib/assert-is-function';\nimport zeros from '@stdlib/array-base-zeros';\nimport ndarraylike2object from '@stdlib/ndarray-base-ndarraylike2object';\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport ndzeros from '@stdlib/ndarray-zeros';\nimport broadcastShapes from '@stdlib/ndarray-base-broadcast-shapes';\nimport broadcast from '@stdlib/ndarray-base-maybe-broadcast-array';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport ndarrayFcn from './ndarray.js';\nimport arrayFcn from './array.js';\n\n\n// MAIN //\n\n/**\n* Applies a function to elements in two input arrays while iterating from right to left and assigns the results to a new array.\n*\n* ## Notes\n*\n* -   The applied function is provided the following arguments:\n*\n*     -   **v1**: element from first input array.\n*     -   **v2**: element from second input array.\n*     -   **idx**: element index.\n*     -   **x**: first input array.\n*     -   **y**: second input array.\n*\n* @param {(ArrayLikeObject|ndarray)} x - first input array\n* @param {(ArrayLikeObject|ndarray)} y - second input array\n* @param {Function} fcn - function to apply\n* @param {*} [thisArg] - function execution context\n* @throws {TypeError} first argument must be an array-like object or an ndarray\n* @throws {TypeError} second argument must be an array-like object or an ndarray\n* @throws {TypeError} input arrays must be either both array-like objects or both ndarrays\n* @throws {RangeError} input arrays must have the same length\n* @throws {Error} input ndarrays must be broadcast compatible\n* @throws {TypeError} third argument must be a function\n* @returns {(Array|ndarray)} output array\n*\n* @example\n* import naryFunction from '@stdlib/utils-nary-function';\n* import add from '@stdlib/math-base-ops-add';\n*\n* var x = [ 1, 2, 3, 4, 5, 6 ];\n* var y = [ 1, 1, 1, 1, 1, 1 ];\n*\n* var out = map2Right( x, y, naryFunction( add, 2 ) );\n* // returns [ 2, 3, 4, 5, 6, 7 ]\n*\n* @example\n* import naryFunction from '@stdlib/utils-nary-function';\n* import add from '@stdlib/math-base-ops-add';\n* import array from '@stdlib/ndarray-array';\n*\n* var opts = {\n*     'dtype': 'generic'\n* };\n* var x = array( [ [ 1, 2, 3 ], [ 4, 5, 6 ] ], opts );\n* var y = array( [ [ 1, 1, 1 ], [ 1, 1, 1 ] ], opts );\n*\n* var out = map2Right( x, y, naryFunction( add, 2 ) );\n* // returns <ndarray>\n*\n* var data = out.data;\n* // returns [ 2, 3, 4, 5, 6, 7 ]\n*/\nfunction map2Right( x, y, fcn, thisArg ) {\n\tvar isxnd;\n\tvar isynd;\n\tvar out;\n\tvar tmp;\n\tvar sh;\n\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( '0kb2S', fcn ) );\n\t}\n\tisxnd = isndarrayLike( x );\n\tisynd = isndarrayLike( y );\n\tif ( isxnd ) { // note: assertion order matters here, as an ndarray-like object is also array-like\n\t\tif ( !isynd ) {\n\t\t\tthrow new TypeError( format( '0kbC5', y ) );\n\t\t}\n\t\t// Broadcast `x` and `y` to a common shape:\n\t\tsh = broadcastShapes( [ x.shape, y.shape ] );\n\t\tif ( sh === null ) {\n\t\t\tthrow new Error( format( '0kb1t' ) );\n\t\t}\n\t\t// Broadcast and wrap the input arrays and ensure that the `ref` properties point to the original input arrays...\n\t\ttmp = ndarraylike2object( broadcast( x, sh ) );\n\t\ttmp.ref = x;\n\t\tx = tmp;\n\n\t\ttmp = ndarraylike2object( broadcast( y, sh ) );\n\t\ttmp.ref = y;\n\t\ty = tmp;\n\n\t\t// Create an output array:\n\t\tout = ndzeros( sh, {\n\t\t\t'dtype': 'generic',\n\t\t\t'order': x.order\n\t\t});\n\n\t\t// Apply the function to the input arrays:\n\t\tndarrayFcn( x, y, ndarraylike2object( out ), fcn, thisArg );\n\t\treturn out;\n\t}\n\tif ( isArrayLikeObject( x ) ) {\n\t\tif ( isynd || !isArrayLikeObject( y ) ) {\n\t\t\tthrow new TypeError( format( '0kbC7', y ) );\n\t\t}\n\t\tif ( y.length !== x.length ) {\n\t\t\tthrow new RangeError( 'invalid arguments. Input arrays must have the same length.' );\n\t\t}\n\t\tout = zeros( x.length );\n\t\tarrayFcn( arraylike2object( x ), arraylike2object( y ), arraylike2object( out ), fcn, thisArg ); // eslint-disable-line max-len\n\t\treturn out;\n\t}\n\tthrow new TypeError( format( '0kbC4', x ) );\n}\n\n\n// EXPORTS //\n\nexport default map2Right;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isArrayLikeObject from '@stdlib/assert-is-array-like-object';\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport isFunction from '@stdlib/assert-is-function';\nimport ndarraylike2object from '@stdlib/ndarray-base-ndarraylike2object';\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport broadcast from '@stdlib/ndarray-base-maybe-broadcast-array';\nimport isReadOnly from '@stdlib/ndarray-base-assert-is-read-only';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport ndarrayFcn from './ndarray.js';\nimport arrayFcn from './array.js';\n\n\n// MAIN //\n\n/**\n* Applies a function to elements in two input arrays while iterating from right to left and assigns the results to an output array.\n*\n* ## Notes\n*\n* -   The applied function is provided the following arguments:\n*\n*     -   **v1**: element from first input array.\n*     -   **v2**: element from second input array.\n*     -   **idx**: element index.\n*     -   **x**: first input array.\n*     -   **y**: second input array.\n*\n* @param {(ArrayLikeObject|ndarray)} x - first input array\n* @param {(ArrayLikeObject|ndarray)} y - second input array\n* @param {(ArrayLikeObject|ndarray)} out - output array\n* @param {Function} fcn - function to apply\n* @param {*} [thisArg] - function execution context\n* @throws {TypeError} first argument must be an array-like object or an ndarray\n* @throws {TypeError} second argument must be an array-like object or an ndarray\n* @throws {TypeError} third argument must be an array-like object or an ndarray\n* @throws {TypeError} fourth argument must be a function\n* @throws {TypeError} input and output arrays must be either all array-like objects or all ndarrays\n* @throws {RangeError} input and output arrays must have the same length\n* @throws {Error} input and output ndarrays must be broadcast compatible\n* @throws {Error} cannot write to a read-only ndarray\n* @returns {(ArrayLikeObject|ndarray)} output array\n*\n* @example\n* import naryFunction from '@stdlib/utils-nary-function';\n* import add from '@stdlib/math-base-ops-add';\n*\n* var x = [ 1, 2, 3, 4, 5, 6 ];\n* var y = [ 1, 1, 1, 1, 1, 1 ];\n* var out = [ 0, 0, 0, 0, 0, 0 ];\n*\n* map2Right( x, y, out, naryFunction( add, 2 ) );\n*\n* console.log( out );\n* // => [ 2, 3, 4, 5, 6, 7 ]\n*\n* @example\n* import naryFunction from '@stdlib/utils-nary-function';\n* import add from '@stdlib/math-base-ops-add';\n* import array from '@stdlib/ndarray-array';\n*\n* var opts = {\n*     'dtype': 'generic',\n*     'shape': [ 2, 3 ]\n* };\n* var x = array( [ [ 1, 2, 3 ], [ 4, 5, 6 ] ], opts );\n* var y = array( [ [ 1, 1, 1 ], [ 1, 1, 1 ] ], opts );\n* var out = array( opts );\n*\n* map2Right( x, y, out, naryFunction( add, 2 ) );\n*\n* var data = out.data;\n* // returns [ 2, 3, 4, 5, 6, 7 ]\n*/\nfunction map2Right( x, y, out, fcn, thisArg ) {\n\tvar isxnd;\n\tvar isynd;\n\tvar isznd;\n\tvar tmp;\n\tvar sh;\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( '0kb3E', fcn ) );\n\t}\n\tisxnd = isndarrayLike( x );\n\tisynd = isndarrayLike( y );\n\tisznd = isndarrayLike( out );\n\tif ( isxnd ) { // note: assertion order matters here, as an ndarray-like object is also array-like\n\t\tif ( !isynd ) {\n\t\t\tthrow new TypeError( format( '0kbC5', y ) );\n\t\t}\n\t\tif ( !isznd ) {\n\t\t\tthrow new TypeError( format( '0kbC6', out ) );\n\t\t}\n\t\tif ( isReadOnly( out ) ) {\n\t\t\tthrow new Error( format( '0kb1q' ) );\n\t\t}\n\t\tout = ndarraylike2object( out );\n\t\tsh = out.shape;\n\n\t\t// Broadcast and wrap the input arrays and ensure that the `ref` properties point to the original input arrays...\n\t\ttmp = ndarraylike2object( broadcast( x, sh ) );\n\t\ttmp.ref = x;\n\t\tx = tmp;\n\n\t\ttmp = ndarraylike2object( broadcast( y, sh ) );\n\t\ttmp.ref = y;\n\t\ty = tmp;\n\n\t\tndarrayFcn( x, y, out, fcn, thisArg );\n\t\treturn out.ref;\n\t}\n\tif ( isArrayLikeObject( x ) ) {\n\t\tif ( isynd || !isArrayLikeObject( y ) ) {\n\t\t\tthrow new TypeError( format( '0kbC7', y ) );\n\t\t}\n\t\tif ( isznd || !isArrayLikeObject( out ) ) {\n\t\t\tthrow new TypeError( format( '0kbC8', out ) );\n\t\t}\n\t\tif ( x.length !== y.length || y.length !== out.length ) {\n\t\t\tthrow new RangeError( format( '0kb1r' ) );\n\t\t}\n\t\tarrayFcn( arraylike2object( x ), arraylike2object( y ), arraylike2object( out ), fcn, thisArg ); // eslint-disable-line max-len\n\t\treturn out;\n\t}\n\tthrow new TypeError( format( '0kbC4', x ) );\n}\n\n\n// EXPORTS //\n\nexport default map2Right;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apply a function to elements in two input arrays while iterating from right to left and assign the results to an output array.\n*\n* @module @stdlib/utils-map2-right\n*\n* @example\n* import naryFunction from '@stdlib/utils-nary-function';\n* import add from '@stdlib/math-base-ops-add';\n* import map2Right from '@stdlib/utils-map2-right';\n*\n* var x = [ 1, 2, 3, 4, 5, 6 ];\n* var y = [ 1, 1, 1, 1, 1, 1 ];\n*\n* var out = map2Right( x, y, naryFunction( add, 2 ) );\n* // returns [ 2, 3, 4, 5, 6, 7 ]\n*\n* @example\n* import naryFunction from '@stdlib/utils-nary-function';\n* import add from '@stdlib/math-base-ops-add';\n* import array from '@stdlib/ndarray-array';\n* import map2Right from '@stdlib/utils-map2-right';\n*\n* var opts = {\n*     'dtype': 'generic'\n* };\n* var x = array( [ [ 1, 2, 3 ], [ 4, 5, 6 ] ], opts );\n* var y = array( [ [ 1, 1, 1 ], [ 1, 1, 1 ] ], opts );\n*\n* var out = map2Right( x, y. naryFunction( add, 2 ) );\n* // returns <ndarray>\n*\n* var data = out.data;\n* // returns [ 2, 3, 4, 5, 6, 7 ]\n*\n* @example\n* import naryFunction from '@stdlib/utils-nary-function';\n* import add from '@stdlib/math-base-ops-add';\n* import map2Right from '@stdlib/utils-map2-right';\n*\n* var x = [ 1, 2, 3, 4, 5, 6 ];\n* var y = [ 1, 1, 1, 1, 1, 1 ];\n* var out = [ 0, 0, 0, 0, 0, 0 ];\n*\n* map2Right.assign( x, y, out, naryFunction( add, 2 ) );\n*\n* console.log( out );\n* // => [ 2, 3, 4, 5, 6, 7 ]\n*\n* @example\n* import naryFunction from '@stdlib/utils-nary-function';\n* import add from '@stdlib/math-base-ops-add';\n* import array from '@stdlib/ndarray-array';\n* import map2Right from '@stdlib/utils-map2-right';\n*\n* var opts = {\n*     'dtype': 'generic',\n*     'shape': [ 2, 3 ]\n* };\n* var x = array( [ [ 1, 2, 3 ], [ 4, 5, 6 ] ], opts );\n* var y = array( [ [ 1, 1, 1 ], [ 1, 1, 1 ] ], opts );\n* var out = array( opts );\n*\n* map2Right.assign( x, y, out, naryFunction( add, 2 ) );\n*\n* var data = out.data;\n* // returns [ 2, 3, 4, 5, 6, 7 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["map2Right","x","y","z","fcn","thisArg","xbuf","ybuf","zbuf","ordx","ordy","ordz","xget","yget","zset","xref","yref","shx","shy","shz","len","sx","sy","sz","ox","oy","oz","ix","iy","i","length","shape","data","strides","offset","order","getter","setter","ref","vind2bind","call","isxnd","isynd","out","tmp","sh","isFunction","TypeError","format","isndarrayLike","broadcastShapes","Error","ndarraylike2object","broadcast","ndzeros","dtype","ndarrayFcn","isArrayLikeObject","RangeError","zeros","arrayFcn","arraylike2object","isznd","isReadOnly","setReadOnly","main","assign"],"mappings":"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"}